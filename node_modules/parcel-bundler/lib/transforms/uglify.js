'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('uglify-js');

const AST_Node = _require.AST_Node,
      minify = _require.minify;

var _require2 = require('babel-to-estree');

const toEstree = _require2.toEstree;

const types = require('babel-types');
const walk = require('babylon-walk');

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (asset) {
    yield asset.parseIfNeeded();

    // Convert to UglifyJS AST
    var ast = AST_Node.from_mozilla_ast(toEstree(asset.ast, asset.contents));
    var result = minify(ast, {
      toplevel: true
    });

    // Uglify did our code generation for us, so remove the old AST
    asset.ast = null;
    asset.outputCode = result.code;
    asset.isAstDirty = false;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();